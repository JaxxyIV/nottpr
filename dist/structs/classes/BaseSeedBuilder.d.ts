import BaseBuilder from "./BaseBuilder";
import * as types from "../../types/types";
import * as structs from "../../types/apiStructs";
export default class BaseSeedBuilder extends BaseBuilder {
    #private;
    constructor(data?: BaseSeedOptions);
    protected static _default(): BaseSeedOptions;
    get accessibility(): types.ItemAccessibility;
    get allowQuickswap(): boolean | undefined;
    get crystals(): structs.CrystalPayloadData;
    get dungeonItems(): types.DungeonItems;
    get enemizer(): structs.EnemizerPayloadData;
    get glitches(): types.GlitchesRequired;
    get goal(): types.Goal;
    get hints(): types.OptionToggle;
    get item(): structs.ItemPayloadData;
    get itemPlacement(): types.ItemPlacement;
    get lang(): types.Lang;
    get mode(): types.WorldState;
    get name(): string | undefined;
    get notes(): string | undefined;
    get overrideStartScreen(): structs.StartHashOverride | undefined;
    get pseudoboots(): boolean | undefined;
    get spoilers(): types.SpoilerSetting;
    get tournament(): boolean;
    get weapons(): types.Weapons;
    setAccessibility(access: types.ItemAccessibility): this;
    setAllowQuickswap(allow?: boolean): this;
    setCrystals(options: CrystalOptions): this;
    setDungeonItems(shufle: types.DungeonItems): this;
    setEnemizer(options: EnemizerOptions): this;
    setGlitches(glitches: types.GlitchesRequired): this;
    setGoal(goal: types.Goal): this;
    setHints(toggle: types.OptionToggle): this;
    setItem(options: ItemOptions): this;
    setItemPlacement(placement: types.ItemPlacement): this;
    setLanguage(lang: types.Lang): this;
    setMode(mode: types.WorldState): this;
    setName(name?: string): this;
    setNotes(notes?: string): this;
    setOverrideStartScreen(array?: structs.StartHashOverride): this;
    setPseudoboots(enable?: boolean): this;
    setSpoilers(spoilers: types.SpoilerSetting): this;
    setTournament(tournament: boolean): this;
    setWeapons(weapons: types.Weapons): this;
}
export type BaseSeedOptions = {
    accessibility?: types.ItemAccessibility;
    allow_quickswap?: boolean;
    crystals?: CrystalOptions;
    dungeon_items?: types.DungeonItems;
    enemizer?: EnemizerOptions;
    glitches?: types.GlitchesRequired;
    goal?: types.Goal;
    hints?: types.OptionToggle;
    item?: ItemOptions;
    item_placement?: types.ItemPlacement;
    lang?: types.Lang;
    mode?: types.WorldState;
    name?: string;
    notes?: string;
    override_start_screen?: structs.StartHashOverride;
    pseudoboots?: boolean;
    spoilers?: types.SpoilerSetting;
    tournament?: boolean;
    weapons?: types.Weapons;
};
type CrystalOptions = {
    ganon?: types.CrystalRequirement;
    tower?: types.CrystalRequirement;
};
type EnemizerOptions = {
    boss_shuffle?: types.BossShuffle;
    enemy_damage?: types.EnemyDamage;
    enemy_health?: types.EnemyHealth;
    enemy_shuffle?: types.EnemyShuffle;
    pot_shuffle?: types.OptionToggle;
};
type ItemOptions = {
    functionality?: types.ItemFunctionality;
    pool?: types.ItemPool;
};
export {};
